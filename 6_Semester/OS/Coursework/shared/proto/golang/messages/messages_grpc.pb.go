// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: messages.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CourseWork_GenerateTasks_FullMethodName             = "/Messages.CourseWork/GenerateTasks"
	CourseWork_SubscribeProcessorOnTasks_FullMethodName = "/Messages.CourseWork/SubscribeProcessorOnTasks"
	CourseWork_CompletedTask_FullMethodName             = "/Messages.CourseWork/CompletedTask"
)

// CourseWorkClient is the client API for CourseWork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseWorkClient interface {
	GenerateTasks(ctx context.Context, opts ...grpc.CallOption) (CourseWork_GenerateTasksClient, error)
	SubscribeProcessorOnTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (CourseWork_SubscribeProcessorOnTasksClient, error)
	CompletedTask(ctx context.Context, in *CompletedTaskRequest, opts ...grpc.CallOption) (*Empty, error)
}

type courseWorkClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseWorkClient(cc grpc.ClientConnInterface) CourseWorkClient {
	return &courseWorkClient{cc}
}

func (c *courseWorkClient) GenerateTasks(ctx context.Context, opts ...grpc.CallOption) (CourseWork_GenerateTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &CourseWork_ServiceDesc.Streams[0], CourseWork_GenerateTasks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &courseWorkGenerateTasksClient{stream}
	return x, nil
}

type CourseWork_GenerateTasksClient interface {
	Send(*GeneratorRequest) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type courseWorkGenerateTasksClient struct {
	grpc.ClientStream
}

func (x *courseWorkGenerateTasksClient) Send(m *GeneratorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *courseWorkGenerateTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *courseWorkClient) SubscribeProcessorOnTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (CourseWork_SubscribeProcessorOnTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &CourseWork_ServiceDesc.Streams[1], CourseWork_SubscribeProcessorOnTasks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &courseWorkSubscribeProcessorOnTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CourseWork_SubscribeProcessorOnTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type courseWorkSubscribeProcessorOnTasksClient struct {
	grpc.ClientStream
}

func (x *courseWorkSubscribeProcessorOnTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *courseWorkClient) CompletedTask(ctx context.Context, in *CompletedTaskRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, CourseWork_CompletedTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseWorkServer is the server API for CourseWork service.
// All implementations must embed UnimplementedCourseWorkServer
// for forward compatibility
type CourseWorkServer interface {
	GenerateTasks(CourseWork_GenerateTasksServer) error
	SubscribeProcessorOnTasks(*Empty, CourseWork_SubscribeProcessorOnTasksServer) error
	CompletedTask(context.Context, *CompletedTaskRequest) (*Empty, error)
	mustEmbedUnimplementedCourseWorkServer()
}

// UnimplementedCourseWorkServer must be embedded to have forward compatible implementations.
type UnimplementedCourseWorkServer struct {
}

func (UnimplementedCourseWorkServer) GenerateTasks(CourseWork_GenerateTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateTasks not implemented")
}
func (UnimplementedCourseWorkServer) SubscribeProcessorOnTasks(*Empty, CourseWork_SubscribeProcessorOnTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeProcessorOnTasks not implemented")
}
func (UnimplementedCourseWorkServer) CompletedTask(context.Context, *CompletedTaskRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedTask not implemented")
}
func (UnimplementedCourseWorkServer) mustEmbedUnimplementedCourseWorkServer() {}

// UnsafeCourseWorkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseWorkServer will
// result in compilation errors.
type UnsafeCourseWorkServer interface {
	mustEmbedUnimplementedCourseWorkServer()
}

func RegisterCourseWorkServer(s grpc.ServiceRegistrar, srv CourseWorkServer) {
	s.RegisterService(&CourseWork_ServiceDesc, srv)
}

func _CourseWork_GenerateTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CourseWorkServer).GenerateTasks(&courseWorkGenerateTasksServer{stream})
}

type CourseWork_GenerateTasksServer interface {
	Send(*Task) error
	Recv() (*GeneratorRequest, error)
	grpc.ServerStream
}

type courseWorkGenerateTasksServer struct {
	grpc.ServerStream
}

func (x *courseWorkGenerateTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *courseWorkGenerateTasksServer) Recv() (*GeneratorRequest, error) {
	m := new(GeneratorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CourseWork_SubscribeProcessorOnTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CourseWorkServer).SubscribeProcessorOnTasks(m, &courseWorkSubscribeProcessorOnTasksServer{stream})
}

type CourseWork_SubscribeProcessorOnTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type courseWorkSubscribeProcessorOnTasksServer struct {
	grpc.ServerStream
}

func (x *courseWorkSubscribeProcessorOnTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _CourseWork_CompletedTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletedTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseWorkServer).CompletedTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseWork_CompletedTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseWorkServer).CompletedTask(ctx, req.(*CompletedTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseWork_ServiceDesc is the grpc.ServiceDesc for CourseWork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseWork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Messages.CourseWork",
	HandlerType: (*CourseWorkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompletedTask",
			Handler:    _CourseWork_CompletedTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateTasks",
			Handler:       _CourseWork_GenerateTasks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeProcessorOnTasks",
			Handler:       _CourseWork_SubscribeProcessorOnTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}
